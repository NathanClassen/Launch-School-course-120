OOP problem solving steps that we'll follow

  1. a) Write out a description of the problem (or game in our case)
     b) extract major nouns and verbs (nouns become classes, verbs become methods)

  2. a) Make an initial guess at organizing the verbs into nouns
     b) Perform a 'spike' to explore the problem with temporary code

  3. (Optional) - When you have a better understanding of the problem, model 
      your thoughts into CRC cards


1a..Write description
_______________________________________________________________________________________

Twenty-One is a card game consisting of a dealer and a player, where the participants try to get as close to 21 as possible without going over.

Here is an overview of the game:
- Both participants are initially dealt 2 cards from a 52-card deck.
- The player takes the first turn, and can "hit" or "stay".
- If the player busts, he loses. If he stays, it's the dealer's turn.
- The dealer must hit until his cards add up to at least 17.
- If he busts, the player wins. If both player and dealer stays, then the highest total wins.
- If both totals are equal, then it's a tie, and nobody wins.

1b..Extract nouns and verbs
_______________________________________________________________________________________

Nouns: game, dealer, player, cards, card-deck, total, participants
Verbs: deal, hit, stay, bust, lose


 The "total" there is obviously not going to be a class, but is actually an attribute within a class. In other words, it's not a *noun that perform actions*, but a property of some other noun. You can also think of it as a verb: "calculate_total".

 Another thing to note is that the verb "busts" is not an action anyone is performing. Rather, it's a state -- is the player/dealer busted?

2a..Make initial guess at organizing nouns and verbs
_______________________________________________________________________________________


   *player
     -hit
     -stay
     -busted?
     -total
   *dealer
     -deal (should this be here or in the 'deck' noun)
     -hit
     -stay
     -busted?
     -total
   *participant
   *deck
     -deal (should this be here or in the 'dealer' noun)
   *card
   *game
     -start



  Notice that there is a lot of redundancy in 'player' and 'dealer'. This should clue us in that dealer and player may both come from a larger more broad class. A super-class that they will inherit from. Maybe Participant?

   LS: " In our reference implementation, we're going to introduce a module called Hand that will capture this redundancy. Remember, this isn't the only way, and you can extract to a super class as well. "


2b..Perform a 'spike'
_______________________________________________________________________________________

Let's write up some code and start exploring this design. We can think and design all we want, but until we start coding, we won't know for certain.

oop_21_game.rb




















